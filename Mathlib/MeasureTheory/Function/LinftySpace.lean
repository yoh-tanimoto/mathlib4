/-
Copyright (c) 2025 Yoh Tanimoto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yoh Tanimoto
-/
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.MeasureTheory.Function.LpSpace.ContinuousFunctions
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Inner
import Mathlib.MeasureTheory.Integral.Bochner.ContinuousLinearMap

/-! # `L^2` space

If `E` is an inner product space over `ùïú` (`‚Ñù` or `‚ÑÇ`), then `Lp E 2 Œº`
(defined in `Mathlib/MeasureTheory/Function/LpSpace.lean`)
is also an inner product space, with inner product defined as `inner f g := ‚à´ a, ‚ü™f a, g a‚ü´ ‚àÇŒº`.

### Main results

* `mem_L1_inner` : for `f` and `g` in `Lp E 2 Œº`, the pointwise inner product `fun x ‚Ü¶ ‚ü™f x, g x‚ü´`
  belongs to `Lp ùïú 1 Œº`.
* `integrable_inner` : for `f` and `g` in `Lp E 2 Œº`, the pointwise inner product
  `fun x ‚Ü¶ ‚ü™f x, g x‚ü´` is integrable.
* `L2.innerProductSpace` : `Lp E 2 Œº` is an inner product space.
-/

noncomputable section

open TopologicalSpace MeasureTheory MeasureTheory.Lp Filter AEEqFun

open scoped NNReal ENNReal MeasureTheory

section

variable {Œ± F : Type*} {m : MeasurableSpace Œ±} {Œº : Measure Œ±}

theorem MeasureTheory.ae_le_trans {Œ± : Type*} {Œ≤ : Type*} {F : Type*} [Preorder Œ≤]
    [FunLike F (Set Œ±) ENNReal] [OuterMeasureClass F Œ±] {Œº : F} {f g h : Œ± ‚Üí Œ≤} (h‚ÇÅ : f ‚â§·∂†[ae Œº] g)
    (h‚ÇÇ : g ‚â§·∂†[ae Œº] h) : f ‚â§·∂†[ae Œº] h := by
  exact h‚ÇÅ.trans h‚ÇÇ

theorem MeasureTheory.ae_rpow_mono {Œ± : Type*} [FunLike F (Set Œ±) ENNReal] [OuterMeasureClass F Œ±]
    {Œº : F} {f g : Œ± ‚Üí ‚Ñù}
    (h : ‚àÄ·µê (a : Œ±) ‚àÇŒº, (ENNReal.ofReal (f a)) ‚â§ (ENNReal.ofReal (g a))) {p : ‚Ñù}
    (hp : 0 < p) :
    ‚àÄ·µê (a : Œ±) ‚àÇŒº, (ENNReal.ofReal (f a)) ^ p ‚â§ (ENNReal.ofReal (g a)) ^ p := by
  rw [MeasureTheory.ae_iff] at h
  rw [MeasureTheory.ae_iff]
  rw [‚Üê h]
  congr
  ext x
  simp only [not_le, Set.mem_setOf_eq]
  exact ENNReal.rpow_lt_rpow_iff hp

theorem MeasureTheory.ae_rpow_mono' {Œ± : Type*} [FunLike F (Set Œ±) ENNReal] [OuterMeasureClass F Œ±]
    {Œº : F} {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû}
    (h : ‚àÄ·µê (a : Œ±) ‚àÇŒº, f a ‚â§ g a) {p : ‚Ñù}
    (hp : 0 < p) :
    ‚àÄ·µê (a : Œ±) ‚àÇŒº, (f a) ^ p ‚â§ (g a) ^ p := by
  rw [MeasureTheory.ae_iff] at h
  rw [MeasureTheory.ae_iff]
  rw [‚Üê h]
  congr
  ext x
  simp only [not_le, Set.mem_setOf_eq]
  exact ENNReal.rpow_lt_rpow_iff hp


theorem MeasureTheory.ae_congr {Œ± : Type*} {G : Type*} {F : Type*} [FunLike G (Set Œ±) ENNReal]
    [OuterMeasureClass G Œ±] {Œº : G} {f g : Œ± ‚Üí F} {p : F ‚Üí Prop}
    (hfg : ‚àÄ·µê (a : Œ±) ‚àÇŒº, f a = g a) (hf : (‚àÄ·µê (a : Œ±) ‚àÇŒº, p (f a))) :
    (‚àÄ·µê (a : Œ±) ‚àÇŒº, p (g a)) := by
  rw [MeasureTheory.ae_iff] at hf
  rw [MeasureTheory.ae_iff] at hfg
  rw [MeasureTheory.ae_iff]
  suffices hle : Œº {a | ¬¨p (g a)} ‚â§ 0 by
    exact nonpos_iff_eq_zero.mp hle
  calc
    Œº {a | ¬¨p (g a)} ‚â§ Œº {a | ¬¨f a = g a ‚à® ¬¨p (f a)} := ?_
    _ ‚â§ Œº {a | ¬¨f a = g a} + Œº {a | ¬¨p (f a)} := MeasureTheory.measure_union_le _ _
    _ = 0 + 0 := by rw [hfg, hf]
    _ = 0 := AddZeroClass.zero_add 0
  apply MeasureTheory.measure_mono
  simp only [Set.setOf_subset_setOf]
  intro a hng
  rw [‚Üê not_and_or]
  by_contra!
  rw [‚Üê this.1] at hng
  exact hng this.2

theorem MeasureTheory.ae_congr' {Œ± : Type*} {G : Type*} {F : Type*} [FunLike G (Set Œ±) ENNReal]
    [OuterMeasureClass G Œ±] {Œº : G} {f1 f2 g : Œ± ‚Üí F} {p : (Œ± ‚Üí F) ‚Üí F ‚Üí Œ± ‚Üí Prop}
    (hf : ‚àÄ·µê (a : Œ±) ‚àÇŒº, f1 a = f2 a) (hp : (‚àÄ·µê (a : Œ±) ‚àÇŒº, p g (f1 a) a)) :
    (‚àÄ·µê (a : Œ±) ‚àÇŒº, p g (f2 a) a) := by
  rw [MeasureTheory.ae_iff] at hp
  rw [MeasureTheory.ae_iff] at hf
  rw [MeasureTheory.ae_iff]
  suffices hle : Œº {a | ¬¨p g (f2 a) a} ‚â§ 0 by
    exact nonpos_iff_eq_zero.mp hle
  calc
    Œº {a | ¬¨p g (f2 a) a} ‚â§ Œº {a | ¬¨f1 a = f2 a ‚à® ¬¨p g (f1 a) a} := ?_
    _ ‚â§ Œº {a | ¬¨f1 a = f2 a} + Œº {a | ¬¨p g (f1 a) a} := MeasureTheory.measure_union_le _ _
    _ = 0 + 0 := by rw [hp, hf]
    _ = 0 := AddZeroClass.zero_add 0
  apply MeasureTheory.measure_mono
  simp only [Set.setOf_subset_setOf]
  intro a hng
  rw [‚Üê not_and_or]
  by_contra!
  rw [‚Üê this.1] at hng
  exact hng this.2

theorem MeasureTheory.ae_congr'' {Œ± : Type*} {F : Type*} [TopologicalSpace F] [MeasurableSpace Œ±]
    {Œº : Measure Œ±} {f1 f2 : Œ± ‚Üí F} {g : Œ± ‚Üí‚Çò[Œº] F} {p : (Œ± ‚Üí F) ‚Üí F ‚Üí Œ± ‚Üí Prop}
    (hf : ‚àÄ·µê (a : Œ±) ‚àÇŒº, f1 a = f2 a) (hp : (‚àÄ·µê (a : Œ±) ‚àÇŒº, p g (f1 a) a)) :
    (‚àÄ·µê (a : Œ±) ‚àÇŒº, p g (f2 a) a) := by
  rw [MeasureTheory.ae_iff] at hp
  rw [MeasureTheory.ae_iff] at hf
  rw [MeasureTheory.ae_iff]
  suffices hle : Œº {a | ¬¨p g (f2 a) a} ‚â§ 0 by
    exact nonpos_iff_eq_zero.mp hle
  calc
    Œº {a | ¬¨p g (f2 a) a} ‚â§ Œº {a | ¬¨f1 a = f2 a ‚à® ¬¨p g (f1 a) a} := ?_
    _ ‚â§ Œº {a | ¬¨f1 a = f2 a} + Œº {a | ¬¨p g (f1 a) a} := MeasureTheory.measure_union_le _ _
    _ = 0 + 0 := by rw [hp, hf]
    _ = 0 := AddZeroClass.zero_add 0
  apply MeasureTheory.measure_mono
  simp only [Set.setOf_subset_setOf]
  intro a hng
  rw [‚Üê not_and_or]
  by_contra!
  rw [‚Üê this.1] at hng
  exact hng this.2

end


section

variable {Œ± F : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} [NormedRing F]
  [Fact (1 ‚â§ (‚ä§ : ‚Ñù‚â•0‚àû))]

#check NormMulClass

#check Lp F ‚ä§ Œº

#synth TopologicalSpace F
#synth Add (Lp F ‚ä§ Œº)

#synth NormedRing ‚ÑÇ

variable (x y : F) (f g : (Œ± ‚Üí‚Çò[Œº] F)) (z : Œ±)
#check f * g

-- theorem MeasureTheory.ae_lt_trans {Œ± : Type*} {Œ≤ : Type*} {F : Type*} [Preorder Œ≤]
--     [FunLike F (Set Œ±) ENNReal] [OuterMeasureClass F Œ±] {Œº : F} {f g h : Œ± ‚Üí Œ≤} (h‚ÇÅ : f <·∂†[ae Œº] g)
--     (h‚ÇÇ : g <·∂†[ae Œº] h) : f <·∂†[ae Œº] h := by
--   exact h‚ÇÅ.trans h‚ÇÇ

@[simp]
theorem EventuallyLE.of_forall {Œ± : Type*} {Œ≤ : Type*} [Preorder Œ≤] (l : Filter Œ±) (f g : Œ± ‚Üí Œ≤)
    (h : f ‚â§ g) : f ‚â§·∂†[l] g := Eventually.of_forall fun x => h x

protected theorem EventuallyLE.of_forall' {Œ± : Type*} {Œ≤ : Type*} [Preorder Œ≤] {l : Filter Œ±}
    {f g : Œ± ‚Üí Œ≤} (h : f ‚â§ g) : f ‚â§·∂†[l] g := EventuallyLE.of_forall l f g h

lemma enorm_mul_le_mul_enorm (x y : F) : ‚Äñx * y‚Äñ‚Çë ‚â§ ‚Äñx‚Äñ‚Çë * ‚Äñy‚Äñ‚Çë := by
  rw [‚Üê ofReal_norm, ‚Üê ofReal_norm, ‚Üê ofReal_norm, ‚Üê ENNReal.ofReal_mul (norm_nonneg _),
    ENNReal.ofReal_le_ofReal_iff (mul_nonneg (norm_nonneg _) (norm_nonneg _))]
  exact norm_mul_le _ _

example (c : ‚Ñù‚â•0‚àû) (h : ‚àÄ·µê (x : Œ±) ‚àÇŒº, g x = f x) (hg : ‚àÄ·µê (x : Œ±) ‚àÇŒº, ‚Äñg x‚Äñ‚Çë ‚â§ c) :
    ‚àÄ·µê (x : Œ±) ‚àÇŒº, ‚Äñf x‚Äñ‚Çë ‚â§ c := by
  exact @MeasureTheory.ae_congr Œ± (Measure Œ±) F _ _ Œº g f (fun (x : F) => ‚Äñx‚Äñ‚Çë ‚â§ c) h hg

lemma XXX : ‚àÄ·µê (x : Œ±) ‚àÇŒº, (f * g) x = (f x) * (g x) := by
  apply MeasureTheory.AEEqFun.coeFn_mul

lemma XXX' : f.cast * g.cast =·∂†[ae Œº] (f * g : Œ± ‚Üí‚Çò[Œº] F) := by
  apply MeasureTheory.ae_eq_comm.mpr
  exact AEEqFun.coeFn_mul f g

lemma pXXX' : (fun x => ‚Äñ(f.cast x) * (g.cast x)‚Äñ‚Çë) =·∂†[ae Œº] (fun x => ‚Äñ(f * g) x‚Äñ‚Çë) := by
  apply Filter.EventuallyEq.fun_comp
  apply XXX'

lemma YYY : ‚àÄ·µê (x : Œ±) ‚àÇŒº, (f x) * (g x) = (f.cast * g.cast) x := by
  apply MeasureTheory.ae_eq_comm.mpr
  apply MeasureTheory.ae_of_all
  intro x
  rfl

example : ‚àÄ·µê (x : Œ±) ‚àÇŒº, ‚Äñ(f * g) x‚Äñ‚Çë = ‚Äñ(f x) * (g x)‚Äñ‚Çë  := by
  apply MeasureTheory.ae_eq_comm.mpr
  apply @MeasureTheory.ae_congr'' Œ± F _ _ Œº (f * g) (fun x => (f x) * (g x)) (f * g) (fun FF => (fun GG => fun x => ‚ÄñGG‚Äñ‚Çë = ‚ÄñFF x‚Äñ‚Çë)) (YYY f g)
  apply pXXX'

lemma linfty_mul_norm (f g : (Œ± ‚Üí‚Çò[Œº] F)) :
    eLpNormEssSup (f * g) Œº ‚â§ eLpNormEssSup f Œº * eLpNormEssSup g Œº := by
  unfold eLpNormEssSup
  apply le_trans _ (ENNReal.essSup_mul_le _ _)
  apply essSup_mono_ae
  have : (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë) * (fun x ‚Ü¶ ‚Äñg x‚Äñ‚Çë) = (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë * ‚Äñg x‚Äñ‚Çë) := by
    rfl
  rw [this]
  have : (fun x ‚Ü¶ ‚Äñf x * g x‚Äñ‚Çë) ‚â§ (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë * ‚Äñg x‚Äñ‚Çë) := by
    intro x
    simp only
    exact enorm_mul_le_mul_enorm (f x) (g x)
  have aaa : (fun x ‚Ü¶ ‚Äñ(f * g) x‚Äñ‚Çë) ‚â§·∂†[ae Œº] fun x ‚Ü¶ ‚Äñf x * g x‚Äñ‚Çë := by
    apply EventuallyEq.le
    apply Filter.EventuallyEq.fun_comp
    apply Filter.EventuallyEq.trans (MeasureTheory.AEEqFun.coeFn_mul f g)
    rfl
  exact MeasureTheory.ae_le_trans aaa (EventuallyLE.of_forall' this)

lemma mul_Linfty (f g : (Lp F ‚ä§ Œº)) : f.1 * g.1 ‚àà (Lp F ‚ä§ Œº) := by
  refine mem_Lp_iff_eLpNorm_lt_top.mpr ?_
  simp only [eLpNorm_exponent_top]
  apply lt_of_le_of_lt (linfty_mul_norm f.1 g.1)
  exact ENNReal.mul_lt_top f.2 g.2

instance : Mul (Lp F ‚ä§ Œº) where
  mul f g := ‚ü®f * g, mul_Linfty f g‚ü©

@[simp]
lemma MeasureTheory.Lp.mul_eq_mul_iff (f g : (Lp F ‚ä§ Œº)) : (f * g).1 = f.1 * g.1 := rfl


lemma MeasureTheory.ae_mul_apply_eq (f g : Œ± ‚Üí‚Çò[Œº] F) : ‚àÄ·µê (a : Œ±) ‚àÇŒº, (f * g) a = f a * g a :=
  MeasureTheory.AEEqFun.coeFn_mul f g

lemma MeasureTheory.ae_mul_apply_eq_refl (f g : Œ± ‚Üí‚Çò[Œº] F) : ‚àÄ·µê (a : Œ±) ‚àÇŒº, f a * g a = (f * g) a:=
  MeasureTheory.ae_eq_comm.mp (MeasureTheory.AEEqFun.coeFn_mul f g)

lemma smul_Linfty {p : ‚Ñù‚â•0‚àû} (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚ä§) (f : (Lp F ‚ä§ Œº))
    (g : (Lp F p Œº)) : f.1 * g.1 ‚àà (Lp F p Œº) := by
  refine mem_Lp_iff_eLpNorm_lt_top.mpr ?_
  rw [MeasureTheory.eLpNorm_eq_lintegral_rpow_enorm (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚ä§)]
  rw [ENNReal.rpow_lt_top_iff_of_pos
    (by simp only [one_div, inv_pos]; exact ENNReal.toReal_pos hp_ne_zero hp_ne_top)]
  calc
    ‚à´‚Åª (x : Œ±), ‚Äñ(f.1 * g.1) x‚Äñ‚Çë ^ p.toReal ‚àÇŒº ‚â§ ‚à´‚Åª (x : Œ±), (‚Äñf x‚Äñ‚Çë * ‚Äñg x‚Äñ‚Çë) ^ p.toReal ‚àÇŒº := ?_
    _ = ‚à´‚Åª (x : Œ±), ‚Äñf x‚Äñ‚Çë ^ p.toReal * ‚Äñg x‚Äñ‚Çë ^ p.toReal ‚àÇŒº := ?_
    _ ‚â§ ‚à´‚Åª (x : Œ±), (eLpNorm f ‚ä§ Œº) ^ p.toReal * ‚Äñg x‚Äñ‚Çë ^ p.toReal ‚àÇŒº := ?_
    _ = (eLpNorm f ‚ä§ Œº) ^ p.toReal * ‚à´‚Åª (x : Œ±), ‚Äñg x‚Äñ‚Çë ^ p.toReal ‚àÇŒº := ?_
    _ = (eLpNorm f ‚ä§ Œº) ^ p.toReal * (eLpNorm g p Œº) ^ p.toReal := ?_
    _ < ‚ä§ := ?_
  ¬∑ apply MeasureTheory.lintegral_mono_ae
    suffices henorm : ‚àÄ·µê (a : Œ±) ‚àÇŒº, ‚Äñ(f.1 * g.1) a‚Äñ‚Çë ^ p.toReal = ‚Äñf.1 a * g.1 a‚Äñ‚Çë ^ p.toReal by
      apply MeasureTheory.ae_rpow_mono'
      rw [MeasureTheory.ae_iff]
      simp only [not_le]
      sorry
    apply @Filter.EventuallyEq.fun_comp _ _ _ _ _ (ae Œº) _ (fun x => x ^ p.toReal)
    apply Filter.EventuallyEq.fun_comp
    exact AEEqFun.coeFn_mul _ _
  ¬∑ congr
    ext x
    rw [ENNReal.mul_rpow_of_nonneg _ _ p.toReal_nonneg]
  ¬∑ apply MeasureTheory.lintegral_mono_ae




  ¬∑ rw [MeasureTheory.lintegral_const_mul']
    exact ENNReal.rpow_ne_top_of_nonneg p.toReal_nonneg (eLpNorm_ne_top f)
  ¬∑ congr
    rw [MeasureTheory.eLpNorm_eq_lintegral_rpow_enorm hp_ne_zero hp_ne_top]
    simp only [one_div]
    rw [ENNReal.rpow_inv_rpow]
    exact ENNReal.toReal_ne_zero.mpr ‚ü®hp_ne_zero, hp_ne_top‚ü©
  ¬∑ exact ENNReal.mul_lt_top (ENNReal.rpow_lt_top_of_nonneg p.toReal_nonneg (eLpNorm_ne_top f))
      (ENNReal.rpow_lt_top_of_nonneg p.toReal_nonneg (eLpNorm_ne_top g))

instance {p : ‚Ñù‚â•0‚àû} [nz : Fact (p ‚â† 0)] [nt : Fact (p ‚â† ‚ä§)] : SMul (Lp F ‚ä§ Œº) (Lp F p Œº) where
  smul f g := ‚ü®f * g, smul_Linfty nz.out nt.out f g‚ü©

variable [c : StarAddMonoid F] [p : NormedStarGroup F]

#check p.to_continuousStar.continuous_star

variable (f : (Lp F ‚ä§ Œº))

lemma norm_star_eq (f : (Lp F ‚ä§ Œº)) : eLpNorm (MeasureTheory.AEEqFun.mk (fun x => c.star (f x))
    (Continuous.comp_aestronglyMeasurable
    p.to_continuousStar.continuous_star (MeasureTheory.AEEqFun.aestronglyMeasurable f.1))) ‚ä§ Œº
    = eLpNorm f ‚ä§ Œº := by
  simp only [eLpNorm_exponent_top]
  unfold eLpNormEssSup
  apply essSup_congr_ae
  have : (fun (z : Œ±) => ‚Äñf z‚Äñ‚Çë) = (fun z => ‚Äñstar (f z)‚Äñ‚Çë) := by
    ext _
    rw [enorm_eq_iff_norm_eq]
    simp
  rw [this]
  apply Filter.EventuallyEq.fun_comp
  exact MeasureTheory.AEEqFun.coeFn_mk _ _

lemma norm_star_lt_top (f : (Lp F ‚ä§ Œº)) : eLpNorm (MeasureTheory.AEEqFun.mk (fun x => c.star (f x))
    (Continuous.comp_aestronglyMeasurable
    p.to_continuousStar.continuous_star (MeasureTheory.AEEqFun.aestronglyMeasurable f.1))) ‚ä§ Œº < ‚ä§
    := by
  rw [norm_star_eq f]
  exact f.2

instance [c : StarAddMonoid F] [p : NormedStarGroup F] : Star (Lp F ‚ä§ Œº) where
  star f := ‚ü®MeasureTheory.AEEqFun.mk (fun x => c.star (f x))
    (Continuous.comp_aestronglyMeasurable p.to_continuousStar.continuous_star
    (MeasureTheory.AEEqFun.aestronglyMeasurable f.1)), norm_star_lt_top f‚ü©

-- #synth NormedRing (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth NormedAlgebra (Lp ‚ÑÇ ‚ä§ Œº)
#synth NormedAddCommGroup (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth StarModule (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth NonUnitalStarAlgebra (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth StarRing (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth StarModule (Lp ‚ÑÇ ‚ä§ Œº)


theorem MeasureTheory.AEEqFun.zero_mul {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [TopologicalSpace Œ≥] [MulZeroClass Œ≥] [ContinuousMul Œ≥] (f : Œ± ‚Üí‚Çò[Œº] Œ≥) :
    (0 : Œ± ‚Üí‚Çò[Œº] Œ≥) * f = (0 : Œ± ‚Üí‚Çò[Œº] Œ≥) := by
  rw [MeasureTheory.AEEqFun.zero_def, ‚Üê AEEqFun.mk_coeFn f, AEEqFun.mk_mul_mk _ f]
  suffices h : (fun x => 0) * f.cast = 0 by
    simp_rw [h]
    rfl
  ext x
  simp

theorem MeasureTheory.AEEqFun.mul_zero {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [TopologicalSpace Œ≥] [MulZeroClass Œ≥] [ContinuousMul Œ≥] (f : Œ± ‚Üí‚Çò[Œº] Œ≥) :
    f * (0 : Œ± ‚Üí‚Çò[Œº] Œ≥) = (0 : Œ± ‚Üí‚Çò[Œº] Œ≥) := by
  rw [MeasureTheory.AEEqFun.zero_def, ‚Üê AEEqFun.mk_coeFn f, AEEqFun.mk_mul_mk f _]
  suffices h : f.cast * (fun x => 0) = 0 by
    simp_rw [h]
    rfl
  ext x
  simp

theorem MeasureTheory.AEEqFun.mul_one {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [TopologicalSpace Œ≥] [MulOneClass Œ≥] [ContinuousMul Œ≥] (f : Œ± ‚Üí‚Çò[Œº] Œ≥) :
    f * (1 : Œ± ‚Üí‚Çò[Œº] Œ≥) = (f : Œ± ‚Üí‚Çò[Œº] Œ≥) := by
  rw [MeasureTheory.AEEqFun.one_def, ‚Üê AEEqFun.mk_coeFn f, AEEqFun.mk_mul_mk f _ ]
  suffices h : f.cast * (fun x => 1) = f.cast by
    simp_rw [h]
  ext x
  simp

theorem MeasureTheory.AEEqFun.one_mul {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [TopologicalSpace Œ≥] [MulOneClass Œ≥] [ContinuousMul Œ≥] (f : Œ± ‚Üí‚Çò[Œº] Œ≥) :
    (1 : Œ± ‚Üí‚Çò[Œº] Œ≥) * f = f := by
  rw [MeasureTheory.AEEqFun.one_def, ‚Üê AEEqFun.mk_coeFn f, AEEqFun.mk_mul_mk _ f]
  suffices h : (fun x => 1) * f.cast = f.cast by
    simp_rw [h]
  ext x
  simp


theorem MeasureTheory.AEEqFun.right_distrib {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [TopologicalSpace Œ≥] [NonUnitalNonAssocSemiring Œ≥] [IsTopologicalSemiring Œ≥] (a b c : Œ± ‚Üí‚Çò[Œº] Œ≥) :
    (a + b) * c = a * c + b * c := by
  ext
  apply ae_eq_trans (coeFn_mul _ _)
  apply ae_eq_trans _ (ae_eq_symm (coeFn_add (a * c) (b * c)))
  have : (a + b).cast * c.cast =·∂†[ae Œº] (a.cast + b.cast) * c.cast := by
    apply EventuallyEq.rw (ae_eq_symm (coeFn_add a b)) (fun x => fun X => X * (c.cast x) = ((a.cast + b.cast) * c.cast ) x)
    apply ae_of_all
    exact fun x => rfl
  apply ae_eq_trans this
  rw [add_mul]
  apply EventuallyEq.rw (ae_eq_symm (coeFn_mul a c))
    (fun (x : Œ±) => (fun (X : Œ≥) => ((a.cast * c.cast) x + (b.cast * c.cast) x = X + (b * c).cast x)))
  apply EventuallyEq.rw (ae_eq_symm (coeFn_mul b c))
    (fun (x : Œ±) => (fun (X : Œ≥) => ((a.cast * c.cast) x + (b.cast * c.cast) x = (a.cast * c.cast) x + X)))
  apply ae_of_all
  exact fun x => rfl

theorem MeasureTheory.AEEqFun.left_distrib {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±}
    [TopologicalSpace Œ≥] [NonUnitalNonAssocSemiring Œ≥] [IsTopologicalSemiring Œ≥] (a b c : Œ± ‚Üí‚Çò[Œº] Œ≥) :
    a * (b + c) = a * b + a * c := by
  ext
  apply ae_eq_trans (coeFn_mul _ _)
  apply ae_eq_trans _ (ae_eq_symm (coeFn_add (a * b) (a * c)))
  have : a.cast * (b + c).cast =·∂†[ae Œº] a.cast * (b.cast + c.cast) := by
    apply EventuallyEq.rw (ae_eq_symm (coeFn_add b c)) (fun x => fun X => (a.cast x) * X = (a.cast x) * (b.cast + c.cast) x)
    apply ae_of_all
    exact fun x => rfl
  apply ae_eq_trans this
  rw [mul_add]
  apply EventuallyEq.rw (ae_eq_symm (coeFn_mul a b))
    (fun (x : Œ±) => (fun (X : Œ≥) => ((a.cast * b.cast) x + (a.cast * c.cast) x = X + (a * c).cast x)))
  apply EventuallyEq.rw (ae_eq_symm (coeFn_mul a c))
    (fun (x : Œ±) => (fun (X : Œ≥) => ((a.cast * b.cast) x + (a.cast * c.cast) x = (a.cast * b.cast) x + X)))
  apply ae_of_all
  exact fun x => rfl






instance : MulZeroClass (Œ± ‚Üí‚Çò[Œº] F) where
  zero_mul := AEEqFun.zero_mul
  mul_zero := AEEqFun.mul_zero

instance : MulOneClass (Œ± ‚Üí‚Çò[Œº] F) where
  one_mul := AEEqFun.one_mul
  mul_one := AEEqFun.mul_one

instance : Semiring (Œ± ‚Üí‚Çò[Œº] F) where
  left_distrib := AEEqFun.left_distrib
  right_distrib := AEEqFun.right_distrib

instance : Ring (Œ± ‚Üí‚Çò[Œº] F) where


section

variable {Œ± : Type*} {Œ≥ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} [TopologicalSpace Œ≥] [MulZeroClass Œ≥] [ContinuousMul Œ≥]

theorem MeasureTheory.Lp.eq_iff (f g : (Lp F ‚ä§ Œº)) : f = g ‚Üî f.1 = g.1 := Subtype.eq_iff

theorem MeasureTheory.Linfty.zero_mul (f : (Lp F ‚ä§ Œº)) : (0 : (Lp F ‚ä§ Œº)) * f = (0 : (Lp F ‚ä§ Œº)) := by
  rw [Subtype.eq_iff]
  simp

theorem MeasureTheory.Linfty.mul_zero (f : (Lp F ‚ä§ Œº)) : f * (0 : (Lp F ‚ä§ Œº)) = (0 : (Lp F ‚ä§ Œº)) := by
  rw [Subtype.eq_iff]
  simp

instance : MulZeroClass (Lp F ‚ä§ Œº) where
  zero_mul := MeasureTheory.Linfty.zero_mul
  mul_zero := MeasureTheory.Linfty.mul_zero

instance : NormedRing (Lp F ‚ä§ Œº) where



end
