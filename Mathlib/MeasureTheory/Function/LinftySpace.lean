/-
Copyright (c) 2025 Yoh Tanimoto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yoh Tanimoto
-/
import Mathlib.Analysis.InnerProductSpace.LinearMap
import Mathlib.MeasureTheory.Function.LpSpace.ContinuousFunctions
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Inner
import Mathlib.MeasureTheory.Integral.Bochner.ContinuousLinearMap

/-! # `L^2` space

If `E` is an inner product space over `ùïú` (`‚Ñù` or `‚ÑÇ`), then `Lp E 2 Œº`
(defined in `Mathlib/MeasureTheory/Function/LpSpace.lean`)
is also an inner product space, with inner product defined as `inner f g := ‚à´ a, ‚ü™f a, g a‚ü´ ‚àÇŒº`.

### Main results

* `mem_L1_inner` : for `f` and `g` in `Lp E 2 Œº`, the pointwise inner product `fun x ‚Ü¶ ‚ü™f x, g x‚ü´`
  belongs to `Lp ùïú 1 Œº`.
* `integrable_inner` : for `f` and `g` in `Lp E 2 Œº`, the pointwise inner product
  `fun x ‚Ü¶ ‚ü™f x, g x‚ü´` is integrable.
* `L2.innerProductSpace` : `Lp E 2 Œº` is an inner product space.
-/

noncomputable section

open TopologicalSpace MeasureTheory MeasureTheory.Lp Filter

open scoped NNReal ENNReal MeasureTheory

namespace MeasureTheory

section

variable {Œ± F : Type*} {m : MeasurableSpace Œ±} {Œº : Measure Œ±} [NormedRing F]
  [Fact (1 ‚â§ (‚ä§ : ‚Ñù‚â•0‚àû))]

#check NormMulClass

#check Lp F ‚ä§ Œº

#synth TopologicalSpace F
#synth Add (Lp F ‚ä§ Œº)

#synth NormedRing ‚ÑÇ

variable (x y : F) (f g : (Œ± ‚Üí‚Çò[Œº] F)) (z : Œ±)
#check f * g

theorem MeasureTheory.ae_le_trans {Œ± : Type*} {Œ≤ : Type*} {F : Type*} [Preorder Œ≤]
    [FunLike F (Set Œ±) ENNReal] [OuterMeasureClass F Œ±] {Œº : F} {f g h : Œ± ‚Üí Œ≤} (h‚ÇÅ : f ‚â§·∂†[ae Œº] g)
    (h‚ÇÇ : g ‚â§·∂†[ae Œº] h) : f ‚â§·∂†[ae Œº] h := by
  exact h‚ÇÅ.trans h‚ÇÇ

-- theorem MeasureTheory.ae_lt_trans {Œ± : Type*} {Œ≤ : Type*} {F : Type*} [Preorder Œ≤]
--     [FunLike F (Set Œ±) ENNReal] [OuterMeasureClass F Œ±] {Œº : F} {f g h : Œ± ‚Üí Œ≤} (h‚ÇÅ : f <·∂†[ae Œº] g)
--     (h‚ÇÇ : g <·∂†[ae Œº] h) : f <·∂†[ae Œº] h := by
--   exact h‚ÇÅ.trans h‚ÇÇ

@[simp]
theorem EventuallyLE.of_forall {Œ± : Type*} {Œ≤ : Type*} [Preorder Œ≤] (l : Filter Œ±) (f g : Œ± ‚Üí Œ≤)
    (h : f ‚â§ g) : f ‚â§·∂†[l] g := Eventually.of_forall fun x => h x

protected theorem EventuallyLE.of_forall' {Œ± : Type*} {Œ≤ : Type*} [Preorder Œ≤] {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤}
  (h : f ‚â§ g) : f ‚â§·∂†[l] g := EventuallyLE.of_forall l f g h


lemma linfty_mul_norm (f g : (Œ± ‚Üí‚Çò[Œº] F)) : eLpNormEssSup (f * g) Œº ‚â§ eLpNormEssSup f Œº * eLpNormEssSup g Œº := by
  unfold eLpNormEssSup
  apply le_trans _ (ENNReal.essSup_mul_le _ _)
  apply essSup_mono_ae
  have : (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë) * (fun x ‚Ü¶ ‚Äñg x‚Äñ‚Çë) = (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë * ‚Äñg x‚Äñ‚Çë) := by
    rfl
  rw [this]
  have : (fun x ‚Ü¶ ‚Äñf x * g x‚Äñ‚Çë) ‚â§ (fun x ‚Ü¶ ‚Äñf x‚Äñ‚Çë * ‚Äñg x‚Äñ‚Çë) := by
    intro x
    simp only
    by_cases hf : ‚Äñf x‚Äñ‚Çë = ‚ä§
    ¬∑ rw [hf]
      by_cases hg : g x = 0
      ¬∑ rw [hg]
        simp
      ¬∑ push_neg at hg
        rw [‚Üê ofReal_norm, ‚Üê ofReal_norm]
        rw [ENNReal.top_mul]
        ¬∑ exact OrderTop.le_top (ENNReal.ofReal ‚Äñf x * g x‚Äñ)
        rw [ENNReal.ofReal_ne_zero_iff]
        exact norm_pos_iff.mpr hg
    ¬∑ push_neg at hf
      by_cases hg : ‚Äñg x‚Äñ‚Çë = ‚ä§
      ¬∑ rw [hg, mul_comm]
        by_cases hf0 : f x = 0
        ¬∑ rw [hf0]
          simp
        ¬∑ push_neg at hf0
          rw [‚Üê ofReal_norm, ‚Üê ofReal_norm]
          rw [ENNReal.top_mul (ENNReal.ofReal_ne_zero_iff.mpr (norm_pos_iff.mpr hf0))]
          exact le_top
      ¬∑ push_neg at hg
        rw [‚Üê ofReal_norm, ‚Üê ofReal_norm, ‚Üê ofReal_norm, ‚Üê ENNReal.ofReal_mul (norm_nonneg _)]
        rw [ENNReal.ofReal_le_ofReal_iff (mul_nonneg (norm_nonneg _) (norm_nonneg _))]
        exact norm_mul_le _ _
  have aaa : (fun x ‚Ü¶ ‚Äñ(f * g) x‚Äñ‚Çë) ‚â§·∂†[ae Œº] fun x ‚Ü¶ ‚Äñf x * g x‚Äñ‚Çë := by
    apply EventuallyEq.le
    apply Filter.EventuallyEq.fun_comp
    apply Filter.EventuallyEq.trans (MeasureTheory.AEEqFun.coeFn_mul f g)
    rfl
  exact MeasureTheory.ae_le_trans aaa (EventuallyLE.of_forall' this)

lemma mul_Linfty (f g : (Lp F ‚ä§ Œº)) : f.1 * g.1 ‚àà (Lp F ‚ä§ Œº) := by
  refine mem_Lp_iff_eLpNorm_lt_top.mpr ?_
  simp only [eLpNorm_exponent_top]
  apply lt_of_le_of_lt (linfty_mul_norm f.1 g.1)
  exact ENNReal.mul_lt_top f.2 g.2



instance : Mul (Lp F ‚ä§ Œº) where
  mul f g := ‚ü®f * g, mul_Linfty f g‚ü©

variable [c : StarAddMonoid F] [p : NormedStarGroup F]

#check p.to_continuousStar.continuous_star

variable (f : (Lp F ‚ä§ Œº))

lemma norm_star (f : (Lp F ‚ä§ Œº)) : eLpNorm (MeasureTheory.AEEqFun.mk (fun x => c.star (f x))
    (Continuous.comp_aestronglyMeasurable
    p.to_continuousStar.continuous_star (MeasureTheory.AEEqFun.aestronglyMeasurable f.1))) ‚ä§ Œº
    = eLpNorm f ‚ä§ Œº := by
  simp only [eLpNorm_exponent_top]
  unfold eLpNormEssSup
  apply essSup_congr_ae
  have : (fun (z : Œ±) => ‚Äñf z‚Äñ‚Çë) = (fun z => ‚Äñstar (f z)‚Äñ‚Çë) := by
    ext _
    rw [enorm_eq_iff_norm_eq]
    simp
  rw [this]
  apply Filter.EventuallyEq.fun_comp
  exact MeasureTheory.AEEqFun.coeFn_mk _ _

lemma norm_star_lt_top (f : (Lp F ‚ä§ Œº)) : eLpNorm (MeasureTheory.AEEqFun.mk (fun x => c.star (f x))
    (Continuous.comp_aestronglyMeasurable
    p.to_continuousStar.continuous_star (MeasureTheory.AEEqFun.aestronglyMeasurable f.1))) ‚ä§ Œº < ‚ä§
    := by
  rw [norm_star f]
  exact f.2

instance [c : StarAddMonoid F] [p : NormedStarGroup F] : Star (Lp F ‚ä§ Œº) where
  star f := ‚ü®MeasureTheory.AEEqFun.mk (fun x => c.star (f x))
    (Continuous.comp_aestronglyMeasurable p.to_continuousStar.continuous_star
    (MeasureTheory.AEEqFun.aestronglyMeasurable f.1)), norm_star_lt_top f‚ü©

-- #synth NormedRing (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth NormedAlgebra (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth NormedAddCommGroup (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth StarModule (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth NonUnitalStarAlgebra (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth StarRing (Lp ‚ÑÇ ‚ä§ Œº)
-- #synth StarModule (Lp ‚ÑÇ ‚ä§ Œº)


instance : NormedRing (Lp F ‚ä§ Œº) where
  left_distrib := sorry

end

end MeasureTheory
